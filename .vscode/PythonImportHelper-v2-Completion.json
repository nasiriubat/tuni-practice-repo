[
    {
        "label": "debug_print",
        "kind": 2,
        "importPath": "basics.mergesort",
        "description": "basics.mergesort",
        "peekOfCode": "def debug_print(debug_msg=None, **kwargs):\n    if debug_msg:\n        print(debug_msg)\n    for key, value in kwargs.items():\n        print(\"{}: {}\".format(key, value))\ndef mergesort(array):\n    if len(array) <= 1:\n        return array\n    m = len(array) // 2\n    left = mergesort(array[:m])",
        "detail": "basics.mergesort",
        "documentation": {}
    },
    {
        "label": "mergesort",
        "kind": 2,
        "importPath": "basics.mergesort",
        "description": "basics.mergesort",
        "peekOfCode": "def mergesort(array):\n    if len(array) <= 1:\n        return array\n    m = len(array) // 2\n    left = mergesort(array[:m])\n    right = mergesort(array[m:])\n    return merge(left, right)\ndef merge(left, right):\n    merged = []\n    while len(left) > 0 and len(right) > 0:",
        "detail": "basics.mergesort",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "basics.mergesort",
        "description": "basics.mergesort",
        "peekOfCode": "def merge(left, right):\n    merged = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            merged.append(left.pop(0))\n        else:\n            merged.append(right.pop(0))\n    if len(left) > 0:\n        merged += left\n    else:",
        "detail": "basics.mergesort",
        "documentation": {}
    }
]